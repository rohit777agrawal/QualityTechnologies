#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var SocketManager = require('../SocketManager')
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/* Socket.io */
var socket = new SocketManager(server)
// var { Server } = require("socket.io");
// var io = new Server(server, { /* options */ 
//   cors: {
//     origin: "http://localhost:3000",
//     methods: ["GET", "POST"]
//   }
// })

// On connect
// io.on("connection", (socket) => {
//   // console.log(socket)
//   // Welcome connectee
//   socket.emit('message', 'Welcome to Chatr');

//   // Broadcast to all users except connectee
//   //socket.broadcast.emit("message", "A user has joined the chat");

//   // On disconnect tell everyone disconnectee left
//   socket.on('disconnect', () => {
//     io.emit("message", "A user has left the chat");
//   });

//   // Listen for chatMessage
//   socket.on("chatMessage", (msg) => {
//     io.emit('message', msg)
//   })
// });


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

